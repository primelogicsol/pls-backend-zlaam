generator client {
  provider = "prisma-client-js"

  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model RateLimiterFlexible {
  key    String    @id
  points Int
  expire DateTime?
}

enum Role {
  CLIENT
  ADMIN
  MODERATOR
  FREELANCER
}

enum KPIRANK {
  BRONZE
  SILVER
  GOLD
  PLATINIUM
  DIAMOND
  CROWN
  ACE
  CONQUERER
}

model User {
  uid                     String    @id @default(cuid())
  username                String    @unique
  fullName                String
  email                   String    @unique
  password                String
  role                    Role      @default(CLIENT)
  otpPassword             String?   @unique
  giveModeratorFullAccess Boolean   @default(false)
  otpPasswordExpiry       DateTime?
  emailVerifiedAt         DateTime?
  createdProjects         Project[]
  phone                   String?   @unique
  tokenVersion            Int       @default(0)
  address                 String?
  detail                  String?
  portfolioUrl            String?
  niche                   String?
  topProjects             String[]  @default([])
  kpi                     Json[]    @default([])
  kpiHistory              Json[]    @default([])
  kpiRank                 KPIRANK   @default(BRONZE)
  projects                Project[] @relation("InterestedFreelancers")
  kpiRankPoints           Int       @default(0)
  selectedProjects        Project[] @relation("SelectedFreelancers")
  trashedBy               String?
  trashedAt               DateTime?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  projectRequests         ProjectRequest[] // opposite relation field

  @@index([trashedAt])
  @@index([trashedBy])
  @@index([uid])
  @@index([username])
  @@index([email])
  @@index([role, createdAt])
  @@index([otpPassword], name: "otp_user_idx")
  @@index([role, username], name: "role_name_user_idx")
}

enum PROJECT_STATUS {
  CANCELLED // project has been cancelled
  PENDING // mean no one has accepted the project yet
  ONGOING // someone has accepted the project and now he/she is working on it
  COMPLETED // progress percentage is 100%
}

enum DIFFICULTY_LEVEL {
  EASY
  MEDIUM
  HARD
}

enum PROJECT_TYPE {
  INHOUSE
  OUTSOURCE
}

model Project {
  id                                    Int              @id @default(autoincrement())
  title                                 String           @unique
  projectSlug                           String           @unique
  detail                                String
  niche                                 String
  bounty                                Int
  deadline                              DateTime
  progressPercentage                    Int              @default(0)
  difficultyLevel                       DIFFICULTY_LEVEL @default(EASY)
  projectStatus                         PROJECT_STATUS   @default(PENDING)
  isDeadlineNeedToBeExtend              Boolean          @default(false)
  commentByClientAfterProjectCompletion String?
  starsByClientAfterProjectCompletion   Int?
  projectCompletedOn                    DateTime?
  projectType                           PROJECT_TYPE     @default(INHOUSE)
  trashedBy                             String?
  trashedAt                             DateTime?
  createdAt                             DateTime         @default(now())
  // One-to-Many Relation with Milestones
  milestones                            Milestone[]
  // Foreign relations with client
  clientWhoPostedThisProject            User?            @relation(fields: [clientWhoPostedThisProjectForeignId], references: [uid])
  clientWhoPostedThisProjectForeignId   String?

  // Many-to-Many Relations with Freelancers
  interestedFreelancers User[] @relation("InterestedFreelancers")
  selectedFreelancers   User[] @relation("SelectedFreelancers")

  @@index([trashedAt])
  @@index([trashedBy])
  @@index([difficultyLevel])
  @@index([id])
  @@index([title])
  @@index([deadline])
  @@index([progressPercentage])
  @@index([clientWhoPostedThisProjectForeignId])
  @@index([createdAt])
}

model Milestone {
  id                   Int      @id @default(autoincrement())
  mileStoneName        String   @unique
  description          String?
  deadline             DateTime
  progress             Int      @default(0)
  totalProgressPoints  Int
  projectId            Int
  priorityRank         Int
  createdAt            DateTime @default(now())
  isMilestoneCompleted Boolean  @default(false)

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([priorityRank])
  @@index([mileStoneName])
  @@index([deadline])
  @@index([progress])
  @@index([id])
  @@index([createdAt])
}

model ContactUs {
  id        Int       @id @default(autoincrement())
  firstName String
  lastName  String
  email     String
  message   String
  createdAt DateTime  @default(now())
  trashedBy String?
  trashedAt DateTime?

  @@index([trashedAt])
  @@index([trashedBy])
  @@index([email])
  @@index([createdAt])
  @@index([message])
  @@map("ContactUs")
}

model Newsletter {
  id                 String  @id @default(cuid())
  email              String  @unique
  subscriptionStatus Boolean @default(true)

  createdAt DateTime @default(now())
}

model MenuItem {
  id          Int        @id @default(autoincrement())
  title       String
  description String?
  slug        String     @unique
  href        String?
  image       String?
  parentId    Int?
  parent      MenuItem?  @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  children    MenuItem[] @relation("ParentChild")
  trashedBy   String?
  trashedAt   DateTime?

  @@index([trashedAt])
  @@index([trashedBy])
  @@index([id])
  @@index([parentId])
}

model GetQuote {
  id        Int       @id @default(autoincrement())
  name      String
  email     String
  phone     String
  company   String?   @default("")
  address   String
  deadline  String?
  services  String
  detail    String?   @default("")
  createdAt DateTime  @default(now())
  trashedBy String?
  trashedAt DateTime?

  @@index([email])
  @@index([id])
  @@index([createdAt])
  @@index([trashedAt])
  @@index([trashedBy])
  @@map("GetQuote")
}

model CreateServicesForQuote {
  id       Int    @id @default(autoincrement())
  services String
}

enum consultationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model ConsultationBooking {
  id          Int                @id @default(autoincrement())
  name        String
  email       String
  phone       String
  message     String
  bookingDate DateTime           @unique
  status      consultationStatus @default(PENDING)
  subject     String
  address     String
  trashedBy   String?
  trashedAt   DateTime?
  createdAt   DateTime           @default(now())

  @@index([id])
  @@index([email])
  @@index([bookingDate])
  @@index([status])
  @@index([trashedAt])
  @@index([trashedBy])
}

model HireUs {
  id        Int       @id @default(autoincrement())
  name      String
  email     String
  phone     String
  company   String?   @default("")
  address   String
  detail    String
  docs      Json[]
  createdAt DateTime  @default(now())
  trashedBy String?
  trashedAt DateTime?

  @@index([email])
  @@index([id])
  @@index([createdAt])
  @@index([trashedAt])
  @@index([trashedBy])
}

model FreeLancersRequest {
  id              Int       @id @default(autoincrement())
  name            String
  email           String    @unique
  phone           String    @unique
  address         String
  detail          String
  yourPortfolio   String
  niche           String
  yourTopProject1 String
  yourTopProject2 String
  yourTopProject3 String
  isAccepted      Boolean   @default(false)
  createdAt       DateTime  @default(now())
  trashedBy       String?
  trashedAt       DateTime?

  @@index([email])
  @@index([id])
  @@index([phone])
  @@index([createdAt])
  @@index([trashedAt])
  @@index([trashedBy])
}

model NichesForFreelancers {
  id    Int    @id @default(autoincrement())
  niche String
}

// ** Blog post

model BlogPost {
  blogId        Int      @id @default(autoincrement())
  blogTitle     String   @unique
  blogSlug      String   @unique
  blogThumbnail String
  blogOverview  String
  blogBody      String
  isPublished   Boolean  @default(true)
  createdAt     DateTime @default(now())

  @@index([blogId])
  @@index([blogTitle])
  @@index([blogSlug])
  @@index([createdAt])
  @@index([blogBody])
  @@map("blogposts")
}

model Profile {
  id                     String                @id @default(uuid())
  userId                 String?                @unique
  whoYouAre              WhoYouAre?            @relation(fields: [whoYouAreId], references: [id])
  whoYouAreId            String?               @unique
  coreRole               CoreRole?             @relation(fields: [coreRoleId], references: [id])
  coreRoleId             String?               @unique
  eliteSkillCards        EliteSkillCards?      @relation(fields: [eliteSkillCardsId], references: [id])
  eliteSkillCardsId      String?               @unique
  toolstackProficiency   ToolstackProficiency? @relation(fields: [toolstackProficiencyId], references: [id])
  toolstackProficiencyId String?               @unique
  domainExperience       DomainExperience?     @relation(fields: [domainExperienceId], references: [id])
  domainExperienceId     String?               @unique
  industryExperience     IndustryExperience?   @relation(fields: [industryExperienceId], references: [id])
  industryExperienceId   String?               @unique
  availabilityWorkflow   AvailabilityWorkflow? @relation(fields: [availabilityWorkflowId], references: [id])
  availabilityWorkflowId String?               @unique
  softSkills             SoftSkills?           @relation(fields: [softSkillsId], references: [id])
  softSkillsId           String?               @unique
  certifications         Certifications?       @relation(fields: [certificationsId], references: [id])
  certificationsId       String?               @unique
  projectQuoting         ProjectQuoting?       @relation(fields: [projectQuotingId], references: [id])
  projectQuotingId       String?               @unique
  legalAgreements        LegalAgreements?      @relation(fields: [legalAgreementsId], references: [id])
  legalAgreementsId      String?               @unique
  isAccepted             Boolean                @default(false)
  createdAt              DateTime              @default(now())
  trashedBy              String?
  trashedAt              DateTime?
}

model WhoYouAre {
  id                String   @id @default(uuid())
  fullName          String?
  email             String?
  timeZone          String
  country           String?
  professionalLinks Json
  profile           Profile? // back relation
  phone             String? 
}

model CoreRole {
  id            String   @id @default(uuid())
  primaryDomain String?
  profile       Profile?
}

model EliteSkillCards {
  id             String   @id @default(uuid())
  selectedSkills String[]
  profile        Profile?
}

model ToolstackProficiency {
  id            String   @id @default(uuid())
  selectedTools String[]
  profile       Profile?
}

model DomainExperience {
  id      String   @id @default(uuid())
  roles   String[]
  profile Profile?
}

model IndustryExperience {
  id                 String   @id @default(uuid())
  selectedIndustries String[]
  profile            Profile?
}

model AvailabilityWorkflow {
  id                     String   @id @default(uuid())
  weeklyCommitment       Int
  workingHours           String[]
  collaborationTools     String[]
  teamStyle              String?
  screenSharing          String?
  availabilityExceptions String?
  profile                Profile?
}

model SoftSkills {
  id                     String   @id @default(uuid())
  collaborationStyle     String?
  communicationFrequency String?
  conflictResolution     String?
  languages              String[]
  teamVsSolo             String?
  profile                Profile?
}

model Certifications {
  id           String   @id @default(uuid())
  certificates String[]
  profile      Profile?
}

model ProjectQuoting {
  id                     String   @id @default(uuid())
  compensationPreference String?
  smallProjectPrice      Int
  midProjectPrice        Int
  longTermPrice          Int
  milestoneTerms         String?
  willSubmitProposals    String?
  profile                Profile?
}

model LegalAgreements {
  id                     String                @id @default(uuid())
  agreements             String[]
  identityVerification   IdentityVerification? @relation(fields: [identityVerificationId], references: [id])
  identityVerificationId String?               @unique
  workAuthorization      WorkAuthorization?    @relation(fields: [workAuthorizationId], references: [id])
  workAuthorizationId    String?               @unique
  profile                Profile?
}

model IdentityVerification {
  id              String           @id @default(uuid())
  idType          String?
  taxDocType      String?
  addressVerified Boolean
  legalAgreements LegalAgreements?
}

model WorkAuthorization {
  id              String           @id @default(uuid())
  interested      Boolean
  legalAgreements LegalAgreements?
}
/**
 * Project Request model
 */
 model ProjectRequest {
  id              String           @id @default(uuid())
  userId          String?
  user            User?             @relation(fields: [userId], references: [uid]) 

  // Register Yourself Info
  fullName        String
  businessEmail   String
  phoneNumber     String?
  companyName     String?
  companyWebsite  String?
  businessAddress String?
  businessType    String?
  referralSource  String?
  stripeCheckOutUrl String?
  paymentIntentId String?

  // Relations
  services        Service[]                     
  industries      Industry[]
  technologies    Technology[]
  features        Feature[]

  // Special Offers
  appliedDiscount Int?
  
  // Timeline & Budget
  timeline        String?
  paymentMethod   String?

  // Estimate
  estimateAccepted        Boolean    @default(false)
  comparisonVisible       Boolean    @default(false)
  estimateFinalPriceMin   Int?
  estimateFinalPriceMax   Int?
  estimateBasePriceMin    Int?
  estimateBasePriceMax    Int?
  discountPercentage      Int?
  discountAmountMin       Int?
  discountAmountMax       Int?
  rushFeePercentage       Int?
  rushFeeAmountMin        Int?
  rushFeeAmountMax        Int?

  // Agreement
  agreementAccepted       Boolean    @default(false)

  // Proceed Options
  selectedOption          String?
  completed               Boolean    @default(false)

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
	@@map("ProjectRequest")
}

model Service {
  id          String          @id @default(uuid())
  submission  ProjectRequest  @relation(fields: [submissionId], references: [id])
  submissionId String
  category    String
  service     String
}

model Industry {
  id          String          @id @default(uuid())
  submission  ProjectRequest  @relation(fields: [submissionId], references: [id])
  submissionId String
  category    String
  industry    String
}

model Technology {
  id          String          @id @default(uuid())
  submission  ProjectRequest  @relation(fields: [submissionId], references: [id])
  submissionId String
  category    String
  technology  String
}

model Feature {
  id          String          @id @default(uuid())
  submission  ProjectRequest  @relation(fields: [submissionId], references: [id])
  submissionId String
  category    String
  feature     String
}